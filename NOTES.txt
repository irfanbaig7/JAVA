1. Introduction to Java: Basics
Java is a class-based, object-oriented 
programming (OOP) language that is widely 
used for building large-scale, high-performance 
applications. Java is platform-independent due 
to its architecture of "Write Once, Run 
Anywhere" (WORA).



2. Data Types and Variables
In Java, variables must be declared with a specific data type. The data types in Java are broadly classified into Primitive and Reference Types.

Primitive Data Types:

byte: 8-bit signed integer.
short: 16-bit signed integer.
int: 32-bit signed integer.
long: 64-bit signed integer.
float: 32-bit floating-point.
double: 64-bit floating-point.
char: 16-bit Unicode character.
boolean: Represents true or false.

Primitive data types have default values when declared as instance variables but not initialized.
For example:
byte → 0
boolean → false
char → \u0000 (empty character)


Non-Primitive Data Types:

String: A sequence of characters.
Array: A collection of elements of the same type.
Default Values:





3. Operators

Arithmetic Operators: Perform basic mathematical operations.

Relational Operators: Compare two values and return a boolean result.

Logical Operators: Perform logical operations on boolean values.

Bitwise Operators: Operate on binary representations of numbers.

Assignment Operators: Assign values to variables with shorthand for operations.

Unary Operators: Operate on a single variable.

Ternary Operator: A shorthand for if-else.

Instanceof Operator: Checks if an object is of a specific class/type.

Type Casting: Converts one data type to another explicitly.




4. Control Flow & Loops

If-Else Statement:
Executes a block of code if a condition is true; otherwise, executes the else block.

If-Else-If Ladder:
Used to test multiple conditions.

Switch Statement:
Executes a block of code based on the value of a variable.

For Loop:
Used for iterating a fixed number of times.

While Loop:
Executes as long as a condition is true.

Do-While Loop:
Executes at least once before checking the condition.

Break Statement:
Exits a loop prematurely.

Continue Statement:
Skips the rest of the current loop iteration and proceeds with the next iteration.

Return Statement:
Exits a method and optionally returns a value.




4. Object-Oriented Programming (OOP) in Java
OOP is a paradigm based on the concept of "objects" which can contain data (fields) and code (methods).

4.1 Classes and Objects
A class is a blueprint for creating objects. Objects are instances of classes.
Constructor is used to initialize objects.
The method displayDetails() prints the object's properties.

4.2 Inheritance
Inheritance allows a new class to inherit properties and methods from an existing class.
The Dog class inherits from the Animal class and can use its methods.
Method Overriding allows modifying behavior in subclasses.

4.3 Polymorphism
Polymorphism allows methods to have the same name but behave differently based on the object.
Example Program: Method Overloading and Overriding.
Method Overloading allows multiple methods with the same name but different parameters.
Method Overriding enables subclass methods to provide specific implementations.

4.4 Abstraction
Abstraction ka matlab hai ki sirf important details ko show karna aur unnecessary details ko hide karna. Yeh ek blueprint (interface ya abstract class) provide karta hai, jo functionality define karta hai, lekin implementation detail hide karta hai.

4.5 Encapsulation
Encapsulation ka matlab hai ki data ko aur uske operations ko ek unit (class) ke andar wrap karna aur direct access ko restrict karna (generally private access modifier ke through).